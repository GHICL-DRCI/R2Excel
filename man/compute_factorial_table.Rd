% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_tables.R
\name{compute_factorial_table}
\alias{compute_factorial_table}
\title{compute factorial table}
\usage{
compute_factorial_table(
  dataframe,
  vars = setdiff(colnames(dataframe), varstrat),
  varstrat = NULL,
  simplify = TRUE,
  prop_table_margin = 2,
  digits = 2,
  force_generate_1_when_0 = FALSE
)
}
\arguments{
\item{dataframe}{A data.frame. tibble or data.table will be converted into data.frame.}

\item{vars}{A vector of characters. Names of dataframe's factorial columns to describe.}

\item{varstrat}{A character. Default NULL. Name of the stratification variable, making groups to compare.}

\item{simplify}{A logical. Default TRUE. Reduce the yes/no  (or 1/0) modalities to display only the yes (1).}

\item{prop_table_margin}{A vector giving the margins to split by. Default 2. 1 indicates rows, 2 indicates columns,
c(1, 2) indicates rows and columns. When x has named dimnames, it can be a character vector selecting dimension names.}

\item{digits}{A integer, Default 2. Integer indicating the number of decimal places (round).}

\item{force_generate_1_when_0}{A logical, Default FALSE. If TRUE, will test if the unique modality is 0 or "non" and
add the level 1 or "oui" so it can be display in counts. Can be combined with simplify to only show the modality (1).}
}
\value{
A list of tables with counts and percentage.
}
\description{
provide descriptive statistics table for factorial data
}
\examples{
\dontrun{
compute_factorial_table(
  dataframe = modified_state,
  vars = c("state.division", "state.region", "binary_test"),
  varstrat = "election",
  digits = 2,
  simplify = FALSE
)
vars_wanted <- c("yes_no_french_question", "all_count_zero")
varstrat_wanted <- "election"
res_fact_simpl0_tabs <- compute_factorial_table(
  dataframe = modified_state,
  vars = vars_wanted,
  varstrat = varstrat_wanted,
  digits = 2,
  simplify = TRUE,
  force_generate_1_when_0 = TRUE
)
}
}
